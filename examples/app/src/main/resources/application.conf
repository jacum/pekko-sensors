
pekko {

  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"
  jvm-exit-on-fatal-error = true
  log-config-on-start = off

  actor {
    provider = "org.apache.pekko.cluster.ClusterActorRefProvider"
    allow-java-serialization = true // for in-memory unit tests only!
    default-dispatcher {
      type = "org.apache.pekko.sensors.dispatch.InstrumentedDispatcherConfigurator"
      executor = "org.apache.pekko.sensors.dispatch.InstrumentedExecutor"

      instrumented-executor {
        delegate = "fork-join-executor"
        measure-runs = true
        watch-long-runs = true
        watch-check-interval = 1s
        watch-too-long-run = 3s
      }
    }

    default-blocking-io-dispatcher {
      type = "org.apache.pekko.sensors.dispatch.InstrumentedDispatcherConfigurator"
      executor = "org.apache.pekko.sensors.dispatch.InstrumentedExecutor"

      instrumented-executor {
        delegate = "thread-pool-executor"
        measure-runs = true
        watch-long-runs = false
      }
    }
  }

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    roles = ["state-node"]
    min-nr-of-members = 1
    configuration-compatibility-check.enforce-on-join = off
    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"

    sharding {
      least-shard-allocation-strategy.rebalance-threshold = 5
      remember-entities = on
    }
    shutdown-after-unsuccessful-join-seed-nodes = 5m
    pekko.remote.use-passive-connections = off

    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"

    split-brain-resolver {
      active-strategy = keep-majority
      stable-after = 20s
      down-all-when-unstable = on
    }
    seed-nodes = ["pekko://app@127.0.0.1:2551"]
  }

  persistence {

    max-concurrent-recoveries = 10
    snapshot-store.plugin = ""

    journal {
      plugin = "pekko.persistence.cassandra.journal"
      auto-start-journals = ["pekko.persistence.cassandra.journal"]
    }

    cassandra {

      session-provider = "org.apache.pekko.sensors.cassandra.InstrumentedCassandraSessionProvider"

      session-dispatcher = "org.apache.pekko.persistence.cassandra.default-dispatcher"
      datastax-java-driver-config = "datastax-java-driver"

      read-profile = "org.apache.pekko-persistence-cassandra-profile"
      write-profile = "org.apache.pekko-persistence-cassandra-profile"

      meta-in-events-by-tag-view = off
      support-all-persistence-ids = off
      coordinated-shutdown-on-error = off

      journal {

        class = "org.apache.pekko.persistence.cassandra.journal.CassandraJournal"
        plugin-dispatcher = "org.apache.pekko.persistence.cassandra.default-dispatcher"

        keyspace-autocreate = true
        tables-autocreate = true

        keyspace = "org.apache.pekko"
        table = "messages"

        table-compaction-strategy {
          class = "SizeTieredCompactionStrategy"
        }

        metadata-table = "metadata"
        replication-strategy = "SimpleStrategy"
      }

      events-by-tag {
        enabled = false
        pubsub-notification = off
      }

      healthcheck {
        plugin-location = "org.apache.pekko.persistence.cassandra"
        timeout = 5s
        health-check-cql = "SELECT now() FROM system.local"
      }

      default-dispatcher {
        type = "org.apache.pekko.sensors.dispatch.InstrumentedDispatcherConfigurator"
        executor = "org.apache.pekko.sensors.dispatch.InstrumentedExecutor"

        instrumented-executor {
          delegate = "fork-join-executor"
          measure-runs = true
          watch-long-runs = false
        }

        fork-join-executor {
          parallelism-min = 6
          parallelism-factor = 1
          parallelism-max = 6
        }
      }
    }
  }

  extensions = [
    org.apache.pekko.sensors.PekkoSensorsExtension
  ]

  management {
    health-checks {
      readiness-path = "health/ready"
      liveness-path = "health/alive"
      liveness-checks {
        cluster-health = "org.apache.pekko.sensors.ClusterHealthCheck"
      }
      readiness-checks {
        name = "nl.pragmasoft.app.ReadinessCheck"
      }
    }
  }
}

datastax-java-driver {
  basic {
    username = "admin"
    password = "admin"
    contact-points = ["localhost"]
    load-balancing-policy.local-datacenter = "datacenter1"
  }
  advanced.metrics {
    session.enabled = [ connected-nodes, cql-requests,  bytes-sent, bytes-received,  cql-client-timeouts  ]
  }
  profiles {
    pekko-persistence-cassandra-profile {
      basic.request {
        consistency = LOCAL_QUORUM
        default-idempotence = true  # the journal does not use any counters or collections
      }
    }
  }
}
